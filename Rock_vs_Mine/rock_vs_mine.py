# -*- coding: utf-8 -*-
"""Rock vs Mine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/149qlP7ufo4kospA0LZ-dAUazerqwx4W9

Importing Dependancies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression

"""Data Collection"""

# loading a dataset into pandas dataframe
sonar_data = pd.read_csv('/content/sonar_data.csv', header = None)
sonar_data.head()

#number of rows and column
sonar_data.shape

sonar_data.describe() #gives statistical methods

sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

#separating data and labels
x = sonar_data.drop(columns=60, axis =1)
y = sonar_data[60]
print(x)
print(y)

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.1, stratify= y, random_state = 1)

print(x.shape,xtrain.shape, xtest.shape)

print(xtrain)
print(ytrain)

"""applying logistic regression"""

model = LogisticRegression()

model.fit(xtrain, ytrain)

#model evaluation
xtrain_prediction = model.predict(xtrain)
training_data_accuracy = accuracy_score(xtrain_prediction, ytrain)
print("Accuracy on training data : ",training_data_accuracy)

#accuracy on test data
xtest_prediction = model.predict(xtest)
test_data_accuracy = accuracy_score(xtest_prediction, ytest)
print("Accuracy on test data : ",test_data_accuracy)

"""Prediction system"""

input = (0.0209,0.0261,0.0120,0.0768,0.1064,0.1680,0.3016,0.3460,0.3314,0.4125,0.3943,0.1334,0.4622,0.9970,0.9137,0.8292,0.6994,0.7825,0.8789,0.8501,0.8920,0.9473,1.0000,0.8975,0.7806,0.8321,0.6502,0.4548,0.4732,0.3391,0.2747,0.0978,0.0477,0.1403,0.1834,0.2148,0.1271,0.1912,0.3391,0.3444,0.2369,0.1195,0.2665,0.2587,0.1393,0.1083,0.1383,0.1321,0.1069,0.0325,0.0316,0.0057,0.0159,0.0085,0.0372,0.0101,0.0127,0.0288,0.0129,0.0023)
#changing the input_data to numpy array
input_numpy = np.asarray(input)

#reshape the np array as we are predicting one input
input_reshaped = input_numpy.reshape(1, -1)

prediction = model.predict(input_reshaped)
print(prediction)

if prediction[0]== 'R':
  print('The object is a rock')
else:
  print("The object is a MINE!")